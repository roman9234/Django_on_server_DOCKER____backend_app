# Основное поле - указание версии. Зависит от возможностей которые мы используем
version: "3.5"

# Далее перечисляем сервисы, которые будут запущены нашим docker-compose файлом

services:
# Сначала указываем имя сервиса (и по умолчанию также назовётся контейнер
  app:
#   Указываем имя образа который будем использовать. По этому имени мы НЕ получаем его
    image: django-app-docker-compose
#   В разделе build указываем откуда берём image
#   context . значтт что мы будем в текущем каталоге искать Dockerfile и запускать из него сборку dokcer image
    build:
      context: .
#   Чтобы подключиться нужно настроить проброс порта внутрь этого контейнера
#   Указываем порты 8000 на компе 8000 в контейнере
    ports:
      - "8000:8000"
#   Нужно чтобы Django запускалось только после работы БД
    depends_on:
      app-postgres:
#       Условие срабатывания
        condition: service_healthy
    volumes:
#   Volume для статических файлов
      - "/opt/myapp_static:/static"
#   При перезапуске VM все компоненты тоже будут запущены
    restart: always

# Добавим в приложение базу данных
# Её также нужно добавить в SETTINGS приложения Django
  app-postgres:
#   Пишем как этот образ указан в докер хабе
    image: postgres:15-alpine
#   Указываем порты если хотим иметь доступ к БД не только из приложения
    ports:
#     5432 стандартный порт постгреса
      - "5432:5432"
#   volumes это указание на то, какие разделы мы можем подключить внутрь контейнера
#   Например один из локальных каталогов
#   Или создать именованный раздел внутри докера
    volumes:
#     Название : каталог
#     Это стандартное значение. Его можно найти в документации
      - "/opt/myapp_data:/var/lib/postgresql/data"
#   Задаём переменные окружения, которые будут установлены внутри приложения при запуске
    environment:
      POSTGRES_DB: django_app
      POSTGRES_USER: django_app
      POSTGRES_PASSWORD: django_app
#   Нужно убедиться что postgres будет запущен раньше, чем наше приложение
#   Для этого используем health check
    healthcheck:
#     В поле тест указывается команда, которую нужно запустить, ответ от которой есть положительный или отрицательный сигнал о готовности
#     Указываем что это будет проводиться в командной оболочке SHELL
#     -U имя пользователя
      test: ["CMD-SHELL", "pg_isready", "-U", "postgres"]
#     Дополнительно нужно указать интервал проверки
#     То есть через какое время после ответа будет повторная проверка
      interval: 1s
#     Сколько ждём выполнения команды
      timeout: 5s
#     Сколько попыток сделать
      retries: 10
#   При перезапуске VM все компоненты тоже будут запущены
    restart: always


