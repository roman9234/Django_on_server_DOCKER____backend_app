Vagrant – консольная утилита, которая управляет виртуальными машинами.
По умолчанию Vagrant работает с системой виртуализации VirtualBox.

Vagrant создает изолированные среды разработки,
при этом не жертвуя привычными инструментами (редакторы, браузеры и т. д.) и оставляя основную систему чистой.

В папке проекта создается файл Vagrantfile с описанием конфигурации виртуальной машины, в котором указывается операционная система,
выделяемые ресурсы, сетевые настройки и скрипты по установке и настройке дополнительных программ.

//Проверка версии
vagrant -v

//Создание Vagrantfile в текущей директории. В нем на языке Ruby описывается конфигурация виртуальной машины
vagrant init

//Запускает виртуальную машину, создавая её, если она ещё не существует. Также выполняет все настройки, указанные в Vagrantfile, включая синхронизацию папок, настройку сети, установку зависимостей и т.д.
vagrant up
vagrant up --debug - Запуск с подробным отображением ошибок

//Останавливает запущенную виртуальную машину. Это аналог нажатия кнопки "Выключить" в VirtualBox. Виртуальная машина остаётся сохранённой на диске и может быть запущена снова.
vagrant halt

//Перезапускает виртуальную машину. Полезно, если вы внесли изменения в Vagrantfile (например, изменили настройки сети или синхронизации) и хотите их применить.
vagrant reload

//Полностью удаляет виртуальную машину вместе со всеми её файлами. После выполнения этой команды машина исчезает из VirtualBox.
vagrant destroy

//Сохраняет текущее состояние виртуальной машины и останавливает её. Это аналог функции "Сохранить состояние" в VirtualBox. Позволяет быстро вернуться к работе без полной перезагрузки.
vagrant suspend

//Возобновляет работу виртуальной машины после выполнения команды vagrant suspend.
vagrant resume

//Подключается к виртуальной машине через SSH. Это позволяет вам работать с машиной из командной строки.
vagrant ssh

//Показывает статус виртуальной машины (например, запущена ли она, остановлена или отсутствует).
vagrant status

//Показывает список всех базовых образов (boxes), которые доступны на вашем компьютере.
vagrant box list

//Cкачать бокс на компьютер
vagrant box add ubuntu/jammy64

//Удаляет базовый образ из локального хранилища.
vagrant box remove <box-name>

//Показывает список всех машин Vagrant, созданных на вашем компьютере (даже если вы находитесь в другой директории).
vagrant global-status

//Команда vagrant provision выполняет провиженинг (настройку) виртуальной машины.
Это процесс выполнения скриптов или инструкций, которые указаны в Vagrantfile для настройки машины после ее создания.
vagrant provision

--пример:
config.vm.provision "shell", inline: <<-SHELL
    sudo apt update
    sudo apt install -y python3-pip python3-virtualenv postgresql nginx
  SHELL


---- Запуск на Linux Сервере c Docker ----
Будем использовать:

//Переходим в нужный нам каталог
cd opt/myapp

//Обновляем сведения о пакетах
sudo apt update
//Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

//Устанавливаем пакеты которые относятся к докеру
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

//Проверка
sudo docker run hello-world


//Создаём каталоги
sudo mkdir -p /opt/myapp_static
sudo mkdir -p /opt/myapp_data


//Собираем образ
sudo docker compose build

//Запуск этого контейнера
sudo docker compose up -d
-d значит что запуск в режиме демона - фоновом режиме

//Запуск контйнера из нового билда
sudo docker compose up -d --build

//Запрос к контейнеру
curl http://localhost:8000

---- Готовим Nginx локально

//Установим его:
sudo apt install nginx




//Устанавливаем pip venv postgres nginx - они нужны для проекта
-y или --assume-yes   чтобы не запрашивался ввод Y/n
--quiet или -q   уменьшает вывод в терминале.
sudo apt install -y python3-pip python3-virtualenv postgresql nginx

Создаём виртуальное окружение. --always-copy так как используется синхронизация папок
virtualenv venv --always-copy

//активация окружения
. ./venv/bin/activate

//Устанавиваем зависимости
pip install -r requirements.txt

//Войдём в консоль postgres
sudo -u postgres psql

//Проверка версии
select version();

//Создадим базу
create database django_app;
create user django_app with password 'django_app';
grant all privileges on database django_app to django_app;

//Так как postgres 15 версии:
alter database django_app owner to django_app;
\q

Начальная настройка postgres закончена

python3 ./django_project/manage.py migrate
python3 ./django_project/manage.py createsuperuser
admin
admin@example.com
admin
admin


База создана схема применена суперпользователь создан


//Смотрим лог если не работает
sudo tail -f /var/log/syslog

//Если изменили настройки сокета:
sudo systemctl daemon-reload






